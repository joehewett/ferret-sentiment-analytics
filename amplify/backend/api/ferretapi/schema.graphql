type Event @model
          @key(
              name: "eventsByUser",
              fields: ["owner"],
              queryField: "eventsByUser"
              )
         @auth(rules: [
             { allow: owner, operations: [read, create, delete, update]},
             { allow: public, operations: [read, create, delete, update]}
             { allow: groups, operations: [read, create, delete, update]}
             { allow: private, operations: [read, create, delete, update]}
         ]) {
                id: ID!
                name: String!
                description: String!
                owner: String
                startDateTime: String
                endDateTime: String
                components: [Component] @connection(name: "EventComponents")
            }

type Component @model
          @key(
              name: "componentsByEvent",
              fields: ["event_id"],
              queryField: "componentsByEvent"
              )
         @auth(rules: [
             { allow: owner, operations: [read, create, delete, update]},
             { allow: public, operations: [read, create, delete, update]}
             { allow: groups, operations: [read, create, delete, update]}
             { allow: private, operations: [read, create, delete, update]}
         ]) {
                id: ID!
                type: String!
                text: String! 
                event_id: ID!
                event: Event @connection(name: "EventComponents")
                feedbacks: [Feedback] @connection(name: "ComponentFeedback")
            }

type Feedback @model
          @key(
              name: "feedbackByComponent",
              fields: ["component_id"],
              queryField: "feedbackByComponent"
              )
         @auth(rules: [
             { allow: owner, operations: [read, create, delete, update]},
             { allow: public, operations: [read, create, delete, update]}
             { allow: groups, operations: [read, create, delete, update]}
             { allow: private, operations: [read, create, delete, update]}
         ]) {
                id: ID!
                component_id: ID!
                response: String!
                sentiment_score: String
                component: Component @connection(name: "ComponentFeedback")
            }